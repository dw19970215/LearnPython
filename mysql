-- 分组

	-- group by
	-- 按照性别分组,查询所有的性别
	select gender,max(age) from students group by gender;
select gender, group_concat( age ) from students group by gender;  

	-- 计算每种性别中的人数
	select gender,count(*) from students group by gender;



	-- group_concat(...)
	-- 查询同种性别中的姓名
	select gender,group_concat(name) from students group by gender;
	


	
	-- 查询每组性别的平均年龄
	select gender,avg(age) from students group by gender;
	

	-- having(注意having和group by 连用 having后通常也要跟 聚合函数)
	-- 查询平均年龄超过30岁的性别，以及姓名
	
	select gender,avg(age),group_concat(name) from students group by gender having avg(age) > 30;
	
	-- 查询每种性别中的人数多于2个的信息
	select gender,count(*) from students group by gender having count(*) >2;

	



	-- with rollup 汇总的作用(了解) 听一下
	--select gender,count(*) from students group by gender with rollup;

	select gender,count(*) from students group by gender with rollup;    


	--以身高170以上的人员,对170以上的人员用性别进行分组,平均年纪大于22的
	select gender,avg(age) from students where height > 170 group by gender having avg(age) > 22;



-- 分页
	-- limit start, count.  mysqlfangyang 
	-- limit 放在最后面(注意)

	起始位置 = (页数-1) * 每一页显示的个数
	
	-- 限制查询出来的数据个数
	-- 查询前5个数据
	select * from students limit 0,5;
	-- select * from students limit 5;


	-- 每页显示2个，第1个页面
	select * from students limit 0,2;
	

	-- 每页显示2个，第2个页面
	select * from students limit 2,2;

	-- 每页显示2个，第3个页面
	select * from students limit 4,2;

	-- 每页显示2个，第4个页面
	select * from students limit 6,2;
	

	-- 每页显示2个，显示第6页的信息, 按照年龄从小到大排序
	select * from students order by age asc limit 10,2;
	-- select * from students order by age  limit 10,2;
	

	
	
	 


-- 连接查询
	-- inner join ... on
	-- select ... from 表A inner join 表B;
	-- 查询 有能够对应班级的学生以及班级信息
	select * from students inner join classes on students.cls_id = classes.id ;  --笛卡尔积

	select * from students where  普通的条件
	select * from students group by having  分组的条件
	select * from students inner join classes on 请写两张表的关系 表1.字段 = 表2.字段

	-- select * from students,classes where students.cls_id = classes.id;


	-- 按照要求显示姓名、班级
	select students.name,classes.name from students inner join classes on students.cls_id = classes.id ; 

	-- 给数据表起名字
	select s.name,c.name from students as s inner join classes as c on s.cls_id = c.id ; 



	-- 查询 有能够对应班级的学生以及班级信息，显示学生的所有信息 students.*，只显示班级名称 classes.name.
select students.*,classes.name from students inner join classes on students.cls_id = classes.id ; 
	
	-- 在以上的查询中，将班级名显示在第1列
	select classes.name , students.* from students inner join classes on students.cls_id = classes.id ; 


	-- 查询 有对应班级的学生以及班级信息, 按照班级名进行排序
	select classes.name , students.* from students inner join classes on students.cls_id = classes.id order by classes.name desc; 

	
	
	-- 当时同一个班级的时候，按照学生的id进行从小到大排序

	select classes.name , students.* from students inner join classes on students.cls_id = classes.id order by classes.name desc,students.id ; 



	-- left join
	-- 查询每位学生对应的班级信息
	select * from students left  join classes on students.cls_id = classes.id;
	


	-- 查询没有对应班级信息的学生
	select * from students left  join classes on students.cls_id = classes.id where classes.name is null;

	
	-- right join   on
	-- 将数据表名字互换位置，用left join完成
	-- select * from classes right  join students on students.cls_id = classes.id;



	

-- 子查询
	-- 标量子查询: 子查询返回的结果是一个数据(一行一列)
	-- 列子查询: 返回的结果是一列(一列多行)
	-- 行子查询: 返回的结果是一行(一行多列)
	
	-- 查询出高于平均身高的信息(height)
	select avg(height) from students ;
	select * from students where height > (select avg(height) from students );


	-- 查询学生的班级号能够对应的 学生名字
	select id from classes;

	select * from students where cls_id  in (select id from classes);
  from pymysql import connect

插入十条数据:
def main():
	# 创建Connection连接
	conn = connect(host='localhost', port=3306, database='python_test_1', user='root', password='mysql', charset='utf8')
	# 获得Cursor对象
	cs1 = conn.cursor()

	# 循环

	for i in range(100000):

		#执行sql语句

		sql = """insert into  test_index(title) VALUES ("ha-%d")"""%i

		cs1.execute(sql)


	#提交
	conn.commit()

	#关闭
	cs1.close()
	conn.close()


if __name__ == '__main__':
    main()
    
    
  ##数据准备
  -- 创建 "京东" 数据库
create database jing_dong charset=utf8;

-- 使用 "京东" 数据库
use jing_dong;

-- 创建一个商品goods数据表
create table goods(
    id int unsigned primary key auto_increment not null,
    name varchar(150) not null,
    cate_name varchar(40) not null,
    brand_name varchar(40) not null,
    price decimal(10,3) not null default 0,
    is_show bit not null default 1,
    is_saleoff bit not null default 0
);

插入数据


-- 向goods表中插入数据

insert into goods values(0,'r510vc 15.6英寸笔记本','笔记本','华硕','3399',default,default); 
insert into goods values(0,'y400n 14.0英寸笔记本电脑','笔记本','联想','4999',default,default);
insert into goods values(0,'g150th 15.6英寸游戏本','游戏本','雷神','8499',default,default); 
insert into goods values(0,'x550cc 15.6英寸笔记本','笔记本','华硕','2799',default,default); 
insert into goods values(0,'x240 超极本','超级本','联想','4880',default,default); 
insert into goods values(0,'u330p 13.3英寸超极本','超级本','联想','4299',default,default); 
insert into goods values(0,'svp13226scb 触控超极本','超级本','索尼','7999',default,default); 
insert into goods values(0,'ipad mini 7.9英寸平板电脑','平板电脑','苹果','1998',default,default);
insert into goods values(0,'ipad air 9.7英寸平板电脑','平板电脑','苹果','3388',default,default); 
insert into goods values(0,'ipad mini 配备 retina 显示屏','平板电脑','苹果','2788',default,default); 
insert into goods values(0,'ideacentre c340 20英寸一体电脑 ','台式机','联想','3499',default,default); 
insert into goods values(0,'vostro 3800-r1206 台式电脑','台式机','戴尔','2899',default,default); 
insert into goods values(0,'imac me086ch/a 21.5英寸一体电脑','台式机','苹果','9188',default,default); 
insert into goods values(0,'at7-7414lp 台式电脑 linux ）','台式机','宏碁','3699',default,default); 
insert into goods values(0,'z220sff f4f06pa工作站','服务器/工作站','惠普','4288',default,default); 
insert into goods values(0,'poweredge ii服务器','服务器/工作站','戴尔','5388',default,default); 
insert into goods values(0,'mac pro专业级台式电脑','服务器/工作站','苹果','28888',default,default); 
insert into goods values(0,'hmz-t3w 头戴显示设备','笔记本配件','索尼','6999',default,default); 
insert into goods values(0,'商务双肩背包','笔记本配件','索尼','99',default,default); 
insert into goods values(0,'x3250 m4机架式服务器','服务器/工作站','ibm','6888',default,default); 
insert into goods values(0,'商务双肩背包','笔记本配件','索尼','99',default,default);
 #京东数据库练习
 from pymysql import *

# 一定死循环等用户的输入
#查询所有商品信息
def search_info():
    # 1. 连接数据库
    # 创建Connection连接
    conn = connect(host='localhost', port=3306, database='jing_dong', user='root', password='mysql', charset='utf8')
    # 获得Cursor对象
    cs1 = conn.cursor()
    # 2. 执行sql语句
    sql = """ select * from goods; """
    cs1.execute(sql)

    # 得到结果
    content = cs1.fetchall()
    for temp in content:
        print(temp)

    # 3. 关闭连接
    cs1.close()
    conn.close()

#查询种类信息
def search_cate():
    # 1.连接数据库
    # 创建Connection连接
    conn = connect(host='localhost', port=3306, database='jing_dong', user='root', password='mysql', charset='utf8')
    # 获得Cursor对象
    cs1 = conn.cursor()

    # 2. 执行数据
    sql = """ select * from goods_cates; """
    cs1.execute(sql)

    content = cs1.fetchall()
    for temp in content:
        print(temp)

    # 3. 关闭数据
    cs1.close()
    conn.close()


#查询品牌信息
def search_brand():
    # 1.连接数据
    # 创建Connection连接
    conn = connect(host='localhost', port=3306, database='jing_dong', user='root', password='mysql', charset='utf8')
    # 获得Cursor对象
    cs1 = conn.cursor()
    # 2.执行sql语句
    sql = """ select * from goods_brands; """
    cs1.execute(sql)

    content = cs1.fetchall()

    for temp in content:
        print(temp)

    # 3.关闭连接
    cs1.close()
    conn.close()

# 添加一个商品信息
def add_info(type):
    # 1.连接数据
    # 创建Connection连接
    conn = connect(host='localhost', port=3306, database='jing_dong', user='root', password='mysql', charset='utf8')
    # 获得Cursor对象
    cs1 = conn.cursor()
    # 2 执行sql语句
    sql = """ insert into goods_cates(name) values("%s"); """%type

    # 执行sql
    cs1.execute(sql)
    conn.commit()  #提交数据


    # 3. 关闭
    cs1.close()
    conn.close()


def find_info(id):
    # 1.连接数据
    # 创建Connection连接
    conn = connect(host='localhost', port=3306, database='jing_dong', user='root', password='mysql', charset='utf8')
    # 获得Cursor对象
    cs1 = conn.cursor()

 # 2 执行sql语句
    sql = """ select * from goods where id = %s"""%id

    # 执行sql
    cs1.execute(sql)

    content = cs1.fetchall()
    for temp in content:
        print(temp)

    # 3. 关闭
    cs1.close()
    conn.close()


def find_info_safe(id):
    # 1.连接数据
    # 创建Connection连接
    conn = connect(host='localhost', port=3306, database='jing_dong', user='root', password='mysql', charset='utf8')
    # 获得Cursor对象
    cs1 = conn.cursor()

    # 2 执行sql语句
    sql = """ select * from goods where id = %s"""

    # 执行sql
    cs1.execute(sql,id)

    content = cs1.fetchall()
    for temp in content:
        print(temp)

    # 3. 关闭
    cs1.close()
    conn.close()


def run_server():
    while True:
        print("1查询所有商品信息")
        print("2查询所有商品在种类信息")
        print("3查询所有商品在品牌信息")
        print("4添加商品种类")
        print("5根据id查询商品信息")
        print("6根据id查询商品信息安全方式")
        data = input()

        #得到数据进行不同的处理
        if data == "1":
            #查询所有的商品信息
            print("商品信息")
            search_info()
        elif data == "2":
            #查询所有商品的种类信息
            print("商品种类")
            search_cate()
        elif data == "3":
            # 查询所有的商品品牌信息
            print("商品品牌")
            search_brand()
        elif data == "4":
            #需要用户输入商品种类
            print("请输入商品品牌")
            type = input()

            add_info(type)
        elif data == "5":
            print("请输入商品id")
            id = input()

            find_info(id)
        elif data == "6":
            print("请输入商品id")
            id = input()

            find_info_safe(id)
        else:
            # 输入的信息有误
            print("您好!您的输入有误!")


def main():
    # 1.用户在命令行输入相应的数字
    run_server()

if __name__ == '__main__':
    main()
    #京东数据库操作
    from pymysql import connect


def find_all_info():
	"""查询所有商品信息"""
	#1. 连接数据
	#2. 执行sql
	#3. 关闭
	# 1. 连接数据库
	# 创建Connection连接
	conn = connect(host='localhost', port=3306, database='jing_dong', user='root', password='mysql', charset='utf8')
	# 获得Cursor对象
	cs1 = conn.cursor()

	#执行sql语句
	cs1.execute(""" select * from goods; """)

	#获取数据
	table_data = cs1.fetchall()

	#关闭
	cs1.close()
	conn.close()

	#数据处理
	for temp in table_data:
		print(temp)


def find_all_cates():
	"""查询所有的种类信息"""
	#1. 连接数据库
	#2.执行sql语句
	#3.关闭

	# 1. 连接数据库
	# 创建Connection连接
	conn = connect(host='localhost', port=3306, database='jing_dong', user='root', password='mysql', charset='utf8')
	# 获得Cursor对象
	cs1 = conn.cursor()

	#sql语句
	sql = """ select * from goods_cates; """

	#执行sql
	cs1.execute(sql)

	#获取数据
	table_data = cs1.fetchall()

	#关闭
	cs1.close()
	conn.close()

	#处理数据
	for temp in table_data:
		print(temp)


def find_all_brand():
	"""查询所有的品牌信息"""
	
	#数据库操作
		# 1.连接数据库
		#2.执行sql语句
		#3. 关闭
	#数据处理
	
	#获取数据库数据
	# 1. 连接数据库
	# 创建Connection连接
	conn = connect(host='localhost', port=3306, database='jing_dong', user='root', password='mysql', charset='utf8')
	# 获得Cursor对象
	cs1 = conn.cursor()
	
	#sql语句
	sql = """ select * from goods_brands;"""
	
	#执行sql
	cs1.execute(sql)
	
	#获取数据
	table_data = cs1.fetchall()
	
	#关闭
	cs1.close()
	conn.close()

	#处理数据
	for temp in table_data:
		print(temp)


def insert_cate_info(cate_name):
	"""添加种类信息"""
	#三大步
	# 创建Connection连接
	conn = connect(host='localhost', port=3306, database='jing_dong', user='root', password='mysql', charset='utf8')
	# 获得Cursor对象
	cs1 = conn.cursor()

	sql = """ insert into goods_cates(name) VALUES ('%s') ;"""%cate_name

	print(sql)

	cs1.execute(sql)

	#执行完sql以后提交curd  cud 增删改都需要手动去提交commit
	conn.commit()

	print(cs1)

	#关闭
	cs1.close()
	conn.close()


def search_info_id(id):
	"""这个根据不同的id显示不同的信息"""
	# 1. 连接数据库
	# 创建Connection连接
	conn = connect(host='localhost', port=3306, database='jing_dong', user='root', password='mysql', charset='utf8')
	# 获得Cursor对象
	cs1 = conn.cursor()

	#sql语句
	sql = """ select * from goods where id = %s ;"""%id

	print(sql)

	#执行sql
	cs1.execute(sql)

	#获取数据
	table_data = cs1.fetchall()
	# table_data = cs1.fetchone()

	#关闭
	cs1.close()
	conn.close()

	#显示
	# print(table_data)

	for temp in table_data:
		print(temp)


def search_info_id_safe(id):  #以后开发请都用安全的方式
	"""这个安全的操作"""
	# 1. 连接数据库
	# 创建Connection连接
	conn = connect(host='localhost', port=3306, database='jing_dong', user='root', password='mysql', charset='utf8')
	# 获得Cursor对象
	cs1 = conn.cursor()

	#sql语句
	sql = """ select * from goods where id = %s """


	#执行sql,可以添加参数
	cs1.execute(sql,(id,))

	#获取数据
	table_data = cs1.fetchall()

	#关闭
	cs1.close()
	conn.close()

	#处理数据
	for temp in table_data:
		print(temp)


def run_server():
	"""显示界面,根据不同的指令返回不同的结果"""
	# 1查询所有商品信息
	# 2查询所有商品在种类信息
	# 3查询所有商品在品牌信息
	# 4添加商品种类
	# 5根据id查询商品信息
	# 6根据id查询商品信息安全方式

	while True:
		#界面显示
		print("查询所有商品信息")
		print("查询所有商品在种类信息")
		print("查询所有商品在品牌信息")
		print("添加商品种类")
		print("根据id查询商品信息")
		print("根据id查询商品信息安全方式")

		#等待输入
		action = input()

		#不同指令返回不同的结果
		if action == "1":
			#查询所有商品
			find_all_info()
		elif action == "2":
			#查询所有种类信息
			find_all_cates()
		elif action == "3":
			#查询所有品牌信息
			find_all_brand()
		elif action == "4":
			#添加种类
			print("请输入种类名称")
			cate_name = input()  #得到种类
			#添加种类信息
			insert_cate_info(cate_name)
		elif action == "5":
			#查询根据id
			print("请输入商品id")
			id = input()  #得到id
			#根据id显示不同的数据
			search_info_id(id)

		elif action == "6":
			#查询根据id
			print("请输入商品id")
			id = input()
			search_info_id_safe(id)
		else:
			print("您好!您的输入有误!")



def main():
	"""运行我们数据库服务"""
	run_server()


if __name__ == '__main__':
    main()
